//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Overworld"",
            ""id"": ""2be4251f-850d-4683-8c58-1059aa528270"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""f32c27ba-01dd-49bf-9fe9-30b0f25c76d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UsePrimary"",
                    ""type"": ""Button"",
                    ""id"": ""7e744902-a433-4ee2-85fe-c4963913e57e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSecondary"",
                    ""type"": ""Button"",
                    ""id"": ""cb080e00-bcc4-4938-a973-8516a29042d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""83239015-b32c-4950-8de1-70f48cda9ed4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""ba70a202-cd15-4d41-8f44-25e4d976c3f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bestiary"",
                    ""type"": ""Button"",
                    ""id"": ""43520ea3-bbb3-495f-ac8b-891445367ae1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Achievements"",
                    ""type"": ""Button"",
                    ""id"": ""7ba37d87-4799-4748-b924-99b0a573999a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipSong"",
                    ""type"": ""Button"",
                    ""id"": ""09321b21-2ad1-434c-a694-b6787ee8706b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""6b1c7c63-2f88-4bd7-8c4e-8f1dbf0cdd53"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""67d0be4b-7488-46b6-8053-39fb3b17b4f0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1025903e-8e5b-44dd-8c72-b103ec1aa0d0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""45e07468-339f-4e4c-a228-bf81058c7089"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f73ac64b-d7fe-493a-9a0f-190211c400e8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e9cef10c-04be-4ea4-af18-c4221c89152d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""UsePrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b59832d6-f8cd-422d-aa5a-c897f1cce043"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""UseSecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0e9cfa0-f1b8-4f1d-adbf-0982c2de8a94"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a9c0c8f-9c34-4b61-942e-bb98d5c341fa"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ef46c29-1958-4613-b56f-aae92ff45b47"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bestiary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b7b0241-2b8a-46bd-aea0-85630ef9c535"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Achievements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7869478b-6cf6-4666-8424-f1a361c08e4c"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipSong"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Overworld
        m_Overworld = asset.FindActionMap("Overworld", throwIfNotFound: true);
        m_Overworld_Walk = m_Overworld.FindAction("Walk", throwIfNotFound: true);
        m_Overworld_UsePrimary = m_Overworld.FindAction("UsePrimary", throwIfNotFound: true);
        m_Overworld_UseSecondary = m_Overworld.FindAction("UseSecondary", throwIfNotFound: true);
        m_Overworld_CursorPosition = m_Overworld.FindAction("CursorPosition", throwIfNotFound: true);
        m_Overworld_Pause = m_Overworld.FindAction("Pause", throwIfNotFound: true);
        m_Overworld_Bestiary = m_Overworld.FindAction("Bestiary", throwIfNotFound: true);
        m_Overworld_Achievements = m_Overworld.FindAction("Achievements", throwIfNotFound: true);
        m_Overworld_SkipSong = m_Overworld.FindAction("SkipSong", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Overworld
    private readonly InputActionMap m_Overworld;
    private IOverworldActions m_OverworldActionsCallbackInterface;
    private readonly InputAction m_Overworld_Walk;
    private readonly InputAction m_Overworld_UsePrimary;
    private readonly InputAction m_Overworld_UseSecondary;
    private readonly InputAction m_Overworld_CursorPosition;
    private readonly InputAction m_Overworld_Pause;
    private readonly InputAction m_Overworld_Bestiary;
    private readonly InputAction m_Overworld_Achievements;
    private readonly InputAction m_Overworld_SkipSong;
    public struct OverworldActions
    {
        private @PlayerInput m_Wrapper;
        public OverworldActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Overworld_Walk;
        public InputAction @UsePrimary => m_Wrapper.m_Overworld_UsePrimary;
        public InputAction @UseSecondary => m_Wrapper.m_Overworld_UseSecondary;
        public InputAction @CursorPosition => m_Wrapper.m_Overworld_CursorPosition;
        public InputAction @Pause => m_Wrapper.m_Overworld_Pause;
        public InputAction @Bestiary => m_Wrapper.m_Overworld_Bestiary;
        public InputAction @Achievements => m_Wrapper.m_Overworld_Achievements;
        public InputAction @SkipSong => m_Wrapper.m_Overworld_SkipSong;
        public InputActionMap Get() { return m_Wrapper.m_Overworld; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OverworldActions set) { return set.Get(); }
        public void SetCallbacks(IOverworldActions instance)
        {
            if (m_Wrapper.m_OverworldActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_OverworldActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_OverworldActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_OverworldActionsCallbackInterface.OnWalk;
                @UsePrimary.started -= m_Wrapper.m_OverworldActionsCallbackInterface.OnUsePrimary;
                @UsePrimary.performed -= m_Wrapper.m_OverworldActionsCallbackInterface.OnUsePrimary;
                @UsePrimary.canceled -= m_Wrapper.m_OverworldActionsCallbackInterface.OnUsePrimary;
                @UseSecondary.started -= m_Wrapper.m_OverworldActionsCallbackInterface.OnUseSecondary;
                @UseSecondary.performed -= m_Wrapper.m_OverworldActionsCallbackInterface.OnUseSecondary;
                @UseSecondary.canceled -= m_Wrapper.m_OverworldActionsCallbackInterface.OnUseSecondary;
                @CursorPosition.started -= m_Wrapper.m_OverworldActionsCallbackInterface.OnCursorPosition;
                @CursorPosition.performed -= m_Wrapper.m_OverworldActionsCallbackInterface.OnCursorPosition;
                @CursorPosition.canceled -= m_Wrapper.m_OverworldActionsCallbackInterface.OnCursorPosition;
                @Pause.started -= m_Wrapper.m_OverworldActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_OverworldActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_OverworldActionsCallbackInterface.OnPause;
                @Bestiary.started -= m_Wrapper.m_OverworldActionsCallbackInterface.OnBestiary;
                @Bestiary.performed -= m_Wrapper.m_OverworldActionsCallbackInterface.OnBestiary;
                @Bestiary.canceled -= m_Wrapper.m_OverworldActionsCallbackInterface.OnBestiary;
                @Achievements.started -= m_Wrapper.m_OverworldActionsCallbackInterface.OnAchievements;
                @Achievements.performed -= m_Wrapper.m_OverworldActionsCallbackInterface.OnAchievements;
                @Achievements.canceled -= m_Wrapper.m_OverworldActionsCallbackInterface.OnAchievements;
                @SkipSong.started -= m_Wrapper.m_OverworldActionsCallbackInterface.OnSkipSong;
                @SkipSong.performed -= m_Wrapper.m_OverworldActionsCallbackInterface.OnSkipSong;
                @SkipSong.canceled -= m_Wrapper.m_OverworldActionsCallbackInterface.OnSkipSong;
            }
            m_Wrapper.m_OverworldActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @UsePrimary.started += instance.OnUsePrimary;
                @UsePrimary.performed += instance.OnUsePrimary;
                @UsePrimary.canceled += instance.OnUsePrimary;
                @UseSecondary.started += instance.OnUseSecondary;
                @UseSecondary.performed += instance.OnUseSecondary;
                @UseSecondary.canceled += instance.OnUseSecondary;
                @CursorPosition.started += instance.OnCursorPosition;
                @CursorPosition.performed += instance.OnCursorPosition;
                @CursorPosition.canceled += instance.OnCursorPosition;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Bestiary.started += instance.OnBestiary;
                @Bestiary.performed += instance.OnBestiary;
                @Bestiary.canceled += instance.OnBestiary;
                @Achievements.started += instance.OnAchievements;
                @Achievements.performed += instance.OnAchievements;
                @Achievements.canceled += instance.OnAchievements;
                @SkipSong.started += instance.OnSkipSong;
                @SkipSong.performed += instance.OnSkipSong;
                @SkipSong.canceled += instance.OnSkipSong;
            }
        }
    }
    public OverworldActions @Overworld => new OverworldActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IOverworldActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnUsePrimary(InputAction.CallbackContext context);
        void OnUseSecondary(InputAction.CallbackContext context);
        void OnCursorPosition(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnBestiary(InputAction.CallbackContext context);
        void OnAchievements(InputAction.CallbackContext context);
        void OnSkipSong(InputAction.CallbackContext context);
    }
}
